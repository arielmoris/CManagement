package com.cms.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.cms.dto.CreditTransactionReportFilter;
import com.cms.dto.DataTableDto;
import com.cms.dto.ReportFilter;
import com.cms.dto.RequestStatusDto;
import com.cms.dto.UserDto;
import com.cms.service.FinancialReportsService;
import com.cms.util.Constants;


@SessionAttributes(types=ReportFilter.class)
@Controller
@RequestMapping("/{path:top|master|agent|shop}")
public class ReportsController {
	
	private FinancialReportsService financialReportService;
	
	@Autowired
	public ReportsController(FinancialReportsService financialReportsService){
		this.financialReportService = financialReportsService;
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder)
	{
	    //binder.registerCustomEditor(ExpenseType.class, new ExpenseTypePropertyEditor());
	    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	    dateFormat.setLenient(false);
	    binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
	}
	
	@RequestMapping(value="/creditReport", method=RequestMethod.GET)
	public ModelAndView viewCreditReport(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		model.put("userDto", userDtoInstance);
		return new ModelAndView(Constants.View.CREDIT_REPORT, model);
	}
	
	@RequestMapping(value="/table/creditReport", method=RequestMethod.POST)
	public ModelAndView tableCreditReport(@PathVariable String path, CreditTransactionReportFilter creditTransferReportFilter, @ModelAttribute DataTableDto dataTableDto, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		
		HttpSession session = request.getSession();
		if(Boolean.parseBoolean(creditTransferReportFilter.getIsSearch())){
			creditTransferReportFilter.setAgent(userDtoInstance.getAgentId());
			session.setAttribute("creditTransferReportFilter", creditTransferReportFilter);
		}else{
			creditTransferReportFilter = (CreditTransactionReportFilter) session.getAttribute("creditTransferReportFilter");
		}
		dataTableDto.setSize(10);
		dataTableDto.setStart(0);
		dataTableDto = financialReportService.getCreditTransactionReportTable(creditTransferReportFilter, dataTableDto);
		model.put("requestStatusDto", new RequestStatusDto(0, "ok"));
		return new ModelAndView(Constants.View.TABLE_CREDIT_REPORT, model);
	}
	
	@RequestMapping(value="/commissionReport", method=RequestMethod.GET)
	public ModelAndView viewCommisssionReport(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.COMMISSION_REPORT, model);
	}
	
	@RequestMapping(value="/agentEarningReportByDay", method=RequestMethod.GET)
	public ModelAndView viewAgentEarningReportByDay(HttpServletRequest request, HttpServletResponse response){
		Map<String, Object> model = new HashMap<>();
		Cookie[] cookies = request.getCookies();
		for (Cookie cookie : cookies){
			System.out.println("--------------------------------------");
			System.out.println(cookie.getName() + "   " + cookie.getValue());
			
		}
		
		response.addCookie(new Cookie("sessionId", "2"));
		
		return new ModelAndView(Constants.View.AGENT_EARNING_REPORT_BY_DAY, model);
	}
	
	@RequestMapping(value="/cashierReport", method=RequestMethod.GET)
	public ModelAndView viewCashierReport(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.CASHIER_REPORT, model);
	}
	
	@RequestMapping(value="/agentEarningReportByAccount", method=RequestMethod.GET)
	public ModelAndView viewAgentEarningReportByAccount(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.AGENT_EARNING_REPORT_BY_ACCOUNT, model);
	}
	
	@RequestMapping(value="/agentEarningReportByStation", method=RequestMethod.GET)
	public ModelAndView viewAgentEarningReportByStation(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.AGENT_EARNING_REPORT_BY_STATION, model);
	}
}


