package com.cms.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.cms.bean.AddManagerResponseData;
import com.cms.bean.AgentManagerListResponseData;
import com.cms.bean.ManagerInfoResponseData;
import com.cms.bean.ResponseWrapper;
import com.cms.dto.AgentManagerListDto;
import com.cms.dto.ChangePasswordDto;
import com.cms.dto.ManagerDto;
import com.cms.dto.ManagerInfoDto;
import com.cms.dto.RequestStatusDto;
import com.cms.dto.UserDto;
import com.cms.service.AccountService;
import com.cms.service.ManagerService;
import com.cms.util.Configurator;
import com.cms.util.Constants;
import com.cms.util.UserUtil;

@Controller
@RequestMapping(value="/{path:top|master|agent|shop|}")
public class ManagersController {
	
	private ManagerService managerService;
	private AccountService accountService;
	@Autowired
	public ManagersController(ManagerService managerService, AccountService accountService) {
		this.managerService = managerService;
		this.accountService = accountService;
	}

	@RequestMapping(value="/loginsList", method=RequestMethod.GET)
	public ModelAndView viewLoginsList(@PathVariable String path, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		Map<String, Object> model = new HashMap<>();
		request.getSession().removeAttribute("selectedLoginId_"+path);
		model.put("userDto", userDtoInstance);
		return new ModelAndView(Constants.View.LOGINS_LIST, model);
	}
	
	@RequestMapping(value="/table/loginsList", method=RequestMethod.POST)
	public ModelAndView tableLoginsList(@PathVariable String path, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = (UserDto)request.getSession().getAttribute("loggedUserDto");
		
		AgentManagerListDto agentManagerListDto = new AgentManagerListDto();
		Map<String, Object> model = new HashMap<>();
		RequestStatusDto requestStatus = null;
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		try {
			ResponseWrapper responseWrapper = managerService.processManagerList(loggedUserDto, subUserDto, agentManagerListDto);;
				
			if (responseWrapper.getRespCode() == 0) {
				List<AgentManagerListResponseData> responseData = responseWrapper.<List<AgentManagerListResponseData>>getDataAsCollection();
				agentManagerListDto.setList(responseData);
				agentManagerListDto.setRecord(responseWrapper.getRecord());
			}
			requestStatus = new RequestStatusDto(responseWrapper.getRespCode(), responseWrapper.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			requestStatus = new RequestStatusDto(0, Configurator.getConfig("generic.server.error"));
		}
		
		model.put("requestStatus", requestStatus);
		model.put("agentManagerListDto", agentManagerListDto);
		model.put("userDto", userDtoInstance);

		return new ModelAndView(Constants.View.TABLE_LOGINS_LIST, model);
	}
	@RequestMapping(value="/updateLogin", method=RequestMethod.GET) //agent manager info
	public ModelAndView viewUpdateLogin(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = (UserDto)request.getSession().getAttribute("loggedUserDto");
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		String targetUserId = (String) request.getSession().getAttribute("selectedLoginId_"+path);
		ManagerDto managerDto = new ManagerDto();
		
		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto");
		if (requestStatusDto != null){
			managerDto = (ManagerDto) request.getSession().getAttribute("managerDto");
			
			request.getSession().removeAttribute("requestStatusDto");
			request.getSession().removeAttribute("managerDto");
		}else{
			ManagerInfoDto managerInfo = new ManagerInfoDto();
			managerInfo.setTargetUserID(targetUserId);
			managerInfo.setViewType('F');
			try {
				ResponseWrapper response = managerService.processManagerInfo(loggedUserDto, subUserDto, managerInfo);
				
				if (response.getRespCode() == Constants.ResponseCode.SUCCESS){
					ManagerInfoResponseData responseData = response.getDataAsSpecifiedType(ManagerInfoResponseData.class);
					managerDto.setFirstName(responseData.getFirstName());
					managerDto.setLastName(responseData.getLastName());
					managerDto.setMobileNum(responseData.getMobileNo());
					managerDto.setUsername(responseData.getMgrUname());
					managerDto.setEmail(responseData.getEmailAdd());
					try {
						managerDto.setCommRate(new BigDecimal(responseData.getCommRate()));
					} catch (Exception e) {}
					
					managerDto.setCountry(responseData.getCountry());
					managerDto.setCurrencyCode(responseData.getCurrencyCode());
				}
				requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
			} catch (Exception e) {
				requestStatusDto = new RequestStatusDto(Constants.ResponseCode.FAILED, Configurator.getConfig("generic.server.error"));
				e.printStackTrace();
			}
		}
		
		//model put variable
		model.put("requestStatusDto",requestStatusDto);
		model.put("userDto", userDtoInstance);
		model.put("managerDto", managerDto);
		
		return new ModelAndView(Constants.View.UPDATE_LOGIN, model);
	}
	
	@RequestMapping(value="/processUpdateLogin", method=RequestMethod.POST) //agent manager info
	public String processUpdateLogin(@PathVariable String path, @ModelAttribute ManagerDto managerDto, HttpServletRequest request){
		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = (UserDto)request.getSession().getAttribute("loggedUserDto");
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		String targetUserId = (String) request.getSession().getAttribute("selectedLoginId_"+path);
		
		managerDto.setTargetUserId(targetUserId);
		RequestStatusDto requestStatusDto = null;
		try {
			ResponseWrapper responseWrapper = managerService.processUpdateManager(loggedUserDto, subUserDto, managerDto);
			if (responseWrapper.getRespCode() == Constants.ResponseCode.SUCCESS){
				if(managerDto.getPassword() != null && !managerDto.getPassword().equals("")){
					ChangePasswordDto changePasswordDto = new ChangePasswordDto();
					changePasswordDto.setAccountId(targetUserId);
					changePasswordDto.setAccountType('A');
					changePasswordDto.setNewPassword(managerDto.getPassword());
					responseWrapper = accountService.processChangePassword(loggedUserDto, subUserDto, changePasswordDto);
				}
			}
			requestStatusDto = new RequestStatusDto(responseWrapper.getRespCode(), responseWrapper.getMessage());
		} catch (Exception e) {
			requestStatusDto = new RequestStatusDto(Constants.ResponseCode.FAILED, Configurator.getConfig("generic.server.error"));
			e.printStackTrace();
		}
		
		request.getSession().setAttribute("requestStatusDto", requestStatusDto);
		request.getSession().setAttribute("managerDto", managerDto);
		return "redirect:/"+path+"/updateLogin";
	}
	

	
	@RequestMapping(value="/addLogin", method=RequestMethod.GET) //add manager
	public ModelAndView viewAddLogin(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		ManagerDto managerDto 	= (ManagerDto) request.getSession().getAttribute("managerDto");

		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto");
		if (requestStatusDto != null){
			model.put("requestStatusDto", requestStatusDto);
			request.getSession().removeAttribute("requestStatusDto");
		}else{
			managerDto = new ManagerDto();
		}
		
		request.getSession().removeAttribute("managerDto");
		model.put("managerDto", managerDto);
		model.put("userDto", userDtoInstance);
		
		return new ModelAndView(Constants.View.ADD_LOGIN, model);
	}
	
	@RequestMapping(value="/processAddLogin", method=RequestMethod.POST)//add manager
	public String processAddLogin(@PathVariable String path, @ModelAttribute ManagerDto managerDto, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = (UserDto)request.getSession().getAttribute("loggedUserDto");
		UserDto subUserDto	 = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		RequestStatusDto requestStatus = null;
		
		try {
			ResponseWrapper responseWrapper = managerService.processAddManager(loggedUserDto, subUserDto, managerDto);
			String message = responseWrapper.getMessage();
			if (responseWrapper.getRespCode() == 0){
				AddManagerResponseData responseData = responseWrapper.getDataAsSpecifiedType(AddManagerResponseData.class);
				request.getSession().setAttribute("responseData", responseData);
				message = "Successfully added new manager with ID: " + responseData.getMgrUname();
				request.getSession().setAttribute("requestStatus", requestStatus);
			}
			requestStatus = new RequestStatusDto(responseWrapper.getRespCode(), message);
		} catch (Exception e) {
			e.printStackTrace();
			requestStatus = new RequestStatusDto(Constants.ResponseCode.FAILED, Configurator.getConfig("generic.server.error"));
		}
		
		request.getSession().setAttribute("requestStatusDto", requestStatus);
		request.getSession().setAttribute("managerDto", managerDto);
		return "redirect:/"+path+"/addLogin";
	}
	
	@RequestMapping(value="/editLogin", method=RequestMethod.POST)
	public String editAgent(@PathVariable String path, HttpServletRequest request){
		HttpSession session = request.getSession();
		
		session.setAttribute("selectedLoginId_"+path, request.getParameter("loginId"));
		
		return "redirect:/" + path + "/updateLogin";
	}
}
