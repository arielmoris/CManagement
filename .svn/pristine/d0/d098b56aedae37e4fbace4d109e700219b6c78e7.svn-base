package com.cms.dao.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import com.cms.dao.PlayerCreditTransactionDao;
import com.cms.dto.CreditTransferReportFilter;
import com.cms.dto.CreditTransferTableDto;
import com.cms.dto.DataTableDto;
import com.cms.entity.PlayerCreditTransaction;
import com.cms.exception.DaoException;

@Repository
public class PlayerCreditTransactionDaoImpl extends GenericDaoImpl<PlayerCreditTransaction> implements PlayerCreditTransactionDao{
	
	@PersistenceContext
	private EntityManager em;
	
	@PostConstruct
	private void init(){
		super.setEntityManager(em);
	}
	
	public List<CreditTransferTableDto> findAll(CreditTransferReportFilter filter, DataTableDto dataTableDto) throws DaoException{
		List<CreditTransferTableDto> list = new ArrayList<CreditTransferTableDto>();
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CreditTransferTableDto> criteria = cb.createQuery(CreditTransferTableDto.class);
			Root<PlayerCreditTransaction> table = criteria.from(PlayerCreditTransaction.class);
			criteria.select(cb.construct(CreditTransferTableDto.class, 
							table.get("tranDateTime"),
							table.type(),
							cb.literal("Player Transaction"),
							cb.literal("Transfer By"),
							cb.literal("transferTo"),
							table.get("amount"),
							cb.literal(new BigDecimal(0)),
							table.get("playerEndingBalance")));
			List<Order> ordering = new ArrayList<Order>();
			ordering.add(cb.asc(table.get("tranDateTime")));
			criteria.orderBy(ordering);
			TypedQuery<CreditTransferTableDto> query = em.createQuery(criteria);
			list = query.getResultList();
		} catch (Exception e) {
			throw new DaoException("Error retrieving playerCreditTransfer ", e);
		}
		
		return list;
	}
	
	
	
}
