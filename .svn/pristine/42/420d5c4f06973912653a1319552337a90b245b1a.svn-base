package com.cms.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.cms.bean.ResponseData;
import com.cms.bean.ResponseWrapper;
import com.cms.dto.AddNewAgentDto;
import com.cms.dto.AddPlayerDto;
import com.cms.dto.AgentsListDto;
import com.cms.dto.PlayersListDto;
import com.cms.dto.RequestStatusDto;
import com.cms.dto.UserDto;
import com.cms.service.AgentService;
import com.cms.service.PlayerService;
import com.cms.util.Configurator;
import com.cms.util.Constants;
import com.cms.util.UserUtil;
import com.cms.util.WebUtil;

@Controller
@RequestMapping(value="/{path:top|master|agent|shop|}")
public class ManagePlayersAccountsController {

	private PlayerService playerService;

	@Autowired
	public ManagePlayersAccountsController(PlayerService playerService) {
		this.playerService = playerService;
	}
	
	@RequestMapping(value="/playersList", method=RequestMethod.GET)
	public ModelAndView tableAgentsList(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		
		request.getSession().removeAttribute("userDto");
		
		model.put("userDto", userDtoInstance);
		model.put("playersList", new PlayersListDto());
		
		return new ModelAndView(Constants.View.AGENTS_LIST, model);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/table/playersList", method=RequestMethod.POST)
	public ModelAndView viewAgentList(@PathVariable String path, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		PlayersListDto playersListDto = WebUtil.mapPlayersListRequest(request.getParameterMap());
		Map<String, Object> model = new HashMap<>();
		RequestStatusDto requestStatus = null;
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		try {
			ResponseWrapper responseWrapper = playerService.processPlayerList(loggedUserDto, subUserDto, playersListDto);
				
			if (responseWrapper.getRespCode() == 0) {
				List responseData = responseWrapper.getDataAsCollection();
				playersListDto.setPlayerListResponseData(responseData);
			}
			requestStatus = new RequestStatusDto(responseWrapper.getRespCode(), responseWrapper.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			requestStatus = new RequestStatusDto(0, Configurator.getConfig("generic.server.error"));
		}
		
		model.put("requestStatus", requestStatus);
		model.put("playersListDto", playersListDto);
		model.put("userDto", userDtoInstance);

		return new ModelAndView(Constants.View.TABLE_AGENTS_LIST, model);
	}
	
	@RequestMapping(value="/registerAccount", method=RequestMethod.GET) //add single player account
	public ModelAndView viewRegisterAccount(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		System.out.println("path "+path);
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		
		AddPlayerDto addPlayerDto = null;	
		
		if (request.getSession().getAttribute("addPlayerDto") == null){
			addPlayerDto = new AddPlayerDto();
		}else{
			addPlayerDto = (AddPlayerDto) request.getSession().getAttribute("addPlayerDto");
			request.getSession().removeAttribute("addNewAgentDto");
		}
		
		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto");
		if (requestStatusDto != null){
			model.put("requestStatusDto", requestStatusDto);
			request.getSession().removeAttribute("requestStatusDto");
		}
		
		///remove from session
		request.getSession().removeAttribute("userDto");
		
		
		//put to model
		model.put("userDto", userDtoInstance);
		model.put("addPlayerDto", addPlayerDto);		

		return new ModelAndView(Constants.View.REGISTER_ACCOUNT, model);
	}
	
	
	@RequestMapping(value="/processRegisterAccount", method=RequestMethod.POST) //add single player account
	public String processRegisterAccount(@PathVariable String path, @ModelAttribute AddPlayerDto addPlayerDto, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		ResponseWrapper response = playerService.processAddPlayer(loggedUserDto, subUserDto, addPlayerDto);
		
		if (response.getRespCode() == 0) {
			
		}
		else{
			///TODO: add response code for error
		}
		
		RequestStatusDto requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
		
		request.getSession().setAttribute("requestStatusDto",requestStatusDto);
		request.getSession().setAttribute("userDto",userDtoInstance);
		request.getSession().setAttribute("addPlayerDto",addPlayerDto);
		
		return "redirect:/" + path + "/registerAccount";
	}
	
	@RequestMapping(value="/updatePlayer", method=RequestMethod.GET)
	public ModelAndView viewUpdatePlayer(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.UPDATE_PLAYER, model);
	}
	
	@RequestMapping(value="/playerStatus", method=RequestMethod.GET)
	public ModelAndView viewPlayerStatus(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.PLAYER_STATUS, model);
	}
	
	@RequestMapping(value="/playerResetPassword", method=RequestMethod.GET)
	public ModelAndView viewPlayerResetPassword(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.PLAYER_RESET_PASSWORD, model);
	}
	
	@RequestMapping(value="/playerResetAttempts", method=RequestMethod.GET)
	public ModelAndView viewPlayerResetAttempts(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.PLAYER_RESET_ATTEMPTS, model);
	}
	
	@RequestMapping(value="/sendGame", method=RequestMethod.GET)
	public ModelAndView viewSendGame(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.SEND_GAME, model);
	}
	
	@RequestMapping(value="/agentEarningReport", method=RequestMethod.GET)
	public ModelAndView viewAgentEarningReport(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.AGENT_EARNING_REPORT, model);
	}
	
	@RequestMapping(value="/gameProfitabilityReportByAccount", method=RequestMethod.GET)
	public ModelAndView viewGameProfitabilityReportByAccount(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.GAME_PROFITABILITY_REPORT_BY_ACCOUNT, model);
	}
	
	@RequestMapping(value="/deposit", method=RequestMethod.GET)
	public ModelAndView viewDeposit(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.DEPOSIT, model);
	}
	
	@RequestMapping(value="/deletePlayers", method=RequestMethod.GET)
	public ModelAndView viewDeletePlayers(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.DELETE_PLAYERS, model);
	}
}
