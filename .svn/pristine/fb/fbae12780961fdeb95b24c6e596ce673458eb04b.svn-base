package com.cms.util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cms.bean.ResponseWrapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class HttpUtil {

	static Logger logger = LoggerFactory.getLogger(HttpUtil.class);

	public static ResponseWrapper sendPost(String url, List<NameValuePair> params){

		logger.debug("Sending post request to {}", url);
		logger.debug("Request params {}",  new StringBuilder().append(params).toString());

		ResponseWrapper response = new ResponseWrapper();
		int errCode = 0;
		String errMsg = "";
		String responseStr = "";
		HttpClient httpClient = HttpClientBuilder.create().build();
		HttpPost post = new HttpPost(url);
		try {
			post.setEntity(new UrlEncodedFormEntity(params));
			HttpResponse httpResponse = httpClient.execute(post);

			errCode = httpResponse.getStatusLine().getStatusCode();
			errMsg = httpResponse.getStatusLine().getReasonPhrase();
			responseStr = "";
			if(errCode == 200){
				BufferedReader br = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()));

				StringBuffer strBuffer = new StringBuffer();
				char[] cBuff = new char[1];

				while((br.read(cBuff, 0, 1)) != -1){
					strBuffer.append(cBuff[0]);
				}
				responseStr = strBuffer.toString();
				try {
					Gson gson = new GsonBuilder().create();
					response = gson.fromJson(responseStr, ResponseWrapper.class);
					if(response == null){ 
						response = new ResponseWrapper();
						response.setRespCode(Constants.ResponseCode.FAILED);
						response.setMessage(Configurator.getConfig("generic.server.error"));
					}
				} catch (ClassCastException e) {
					response.setRespCode(Constants.ResponseCode.FAILED);
					response.setMessage(Configurator.getConfig("generic.server.error"));
					logger.error("Error parsing [{}] : {}",responseStr,e.getMessage());
				}
			}else{
				response.setRespCode(Constants.ResponseCode.FAILED);
				response.setMessage(Configurator.getConfig("generic.server.error"));
			}
		} catch (Exception e) {
			logger.trace("Exception in httputil ", e);
			response.setRespCode(Constants.ResponseCode.FAILED);
			response.setMessage(Configurator.getConfig("generic.server.error"));
		} finally{
			post.releaseConnection();
			httpClient.getConnectionManager().shutdown();
		}
		
		logger.debug("Leaving sendPost (resp={})",response.toString());
		
		return response;
	}
}
