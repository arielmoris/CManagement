package com.cms.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.cms.bean.AgentBalanceResponseData;
import com.cms.bean.AgentListResponseData;
import com.cms.bean.AgentStatusResponseData;
import com.cms.bean.ResponseWrapper;
import com.cms.dto.AddNewAgentDto;
import com.cms.dto.AgentsListDto;
import com.cms.dto.ChangeAgentBalanceDto;
import com.cms.dto.ChangeAgentStatusDto;
import com.cms.dto.CreditDebitAgentDto;
import com.cms.dto.RequestStatusDto;
import com.cms.dto.UserDto;
import com.cms.service.AgentService;
import com.cms.util.Configurator;
import com.cms.util.Constants;
import com.cms.util.UserUtil;
import com.cms.util.WebUtil;


@Controller
@RequestMapping(value="/{path:top|master|agent|shop|}")
public class ManageAgentsAccountController {

	private AgentService agentService;

	@Autowired
	public ManageAgentsAccountController(AgentService agentService) {
		this.agentService = agentService;
	}
	
	@RequestMapping(value="/agentsList", method=RequestMethod.GET)
	public ModelAndView viewAgentsList(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		
		model.put("agentsListDto", new AgentsListDto());
		
		return new ModelAndView(Constants.View.AGENTS_LIST, model);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/table/agentsList", method=RequestMethod.POST)
	public ModelAndView tableAgentList(@PathVariable String path, HttpServletRequest request){
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		AgentsListDto agentsListDto = WebUtil.mapAgentsListRequest(request.getParameterMap());
		Map<String, Object> model = new HashMap<>();
		RequestStatusDto requestStatus = null;
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		try {
			ResponseWrapper responseWrapper = agentService.processAgentList(loggedUserDto, subUserDto, agentsListDto);
				
			if (responseWrapper.getRespCode() == 0) {
				List<AgentListResponseData> responseData = responseWrapper.<List<AgentListResponseData>>getDataAsCollection();
				agentsListDto.setAgentListResponseDataTable(responseData);
				agentsListDto.setRecord(responseWrapper.getRecord());
			}
			requestStatus = new RequestStatusDto(responseWrapper.getRespCode(), responseWrapper.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			requestStatus = new RequestStatusDto(0, Configurator.getConfig("generic.server.error"));
		}
		
		model.put("requestStatus", requestStatus);
		model.put("agentsListDto", agentsListDto);
		model.put("userDto", userDtoInstance);

		return new ModelAndView(Constants.View.TABLE_AGENTS_LIST, model);
	}
	
	@RequestMapping(value="/addAgent", method=RequestMethod.GET)
	public ModelAndView viewAddAgent(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		System.out.println("path "+path);
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		
		AddNewAgentDto addNewAgentDto = null;	
		
		if (request.getSession().getAttribute("addNewAgentDto") == null){
			addNewAgentDto = new AddNewAgentDto();
		}else{
			addNewAgentDto = (AddNewAgentDto) request.getSession().getAttribute("addNewAgentDto");
			request.getSession().removeAttribute("addNewAgentDto");
		}
		
		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto");
		if (requestStatusDto != null){
			model.put("requestStatusDto", requestStatusDto);
			request.getSession().removeAttribute("requestStatusDto");
		}
		
		///remove from session
		request.getSession().removeAttribute("userDto");
		
		
		//put to model
		model.put("userDto", userDtoInstance);
		model.put("addNewAgentDto", addNewAgentDto);		
		return new ModelAndView(Constants.View.ADD_AGENT, model);
	}
	
	@RequestMapping(value="/changeBalance", method=RequestMethod.GET)
	public ModelAndView viewChangeBalance(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		
		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto");
		if (requestStatusDto != null){
		
			model.put("requestStatusDto",requestStatusDto);
			model.put("changeAgentBalanceDto", request.getSession().getAttribute("changeAgentBalanceDto"));
			
			request.getSession().removeAttribute("requestStatusDto");
			request.getSession().removeAttribute("changeAgentBalanceDto");
		}
		
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		String targetUserId = request.getParameter("targetUserId");
		ResponseWrapper response = agentService.processAgentBalance(loggedUserDto, subUserDto, targetUserId);
		if (response.getRespCode() == 0){
			AgentBalanceResponseData responseData = response.getDataAsSpecifiedType(AgentBalanceResponseData.class);
			ChangeAgentBalanceDto changeAgentBalanceDto = new ChangeAgentBalanceDto();
			
			changeAgentBalanceDto.setMgrFullName(responseData.getMgrFullName());
			changeAgentBalanceDto.setTargetUserID(responseData.getTargetUserID());
			changeAgentBalanceDto.setBalance(responseData.getBalance());
			model.put("changeAgentBalanceDto", changeAgentBalanceDto);
		}
		
		///remove session
		request.getSession().removeAttribute("userDto");
		
		///model put
		model.put("userDto", userDtoInstance);
		
		return new ModelAndView(Constants.View.CHANGE_BALANCE, model);
	}
	
	@RequestMapping(value="/changeCommissionFee", method=RequestMethod.GET)
	public ModelAndView viewChangeCommissionFee(HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		return new ModelAndView(Constants.View.CHANGE_COMMISSION_FEE, model);
	}
	
	@RequestMapping(value="/searchAgentsList", method=RequestMethod.GET)
	public ModelAndView viewSearchAgentsList(@ModelAttribute AgentsListDto agentsListDto, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		
		return new ModelAndView(Constants.View.AGENTS_LIST, model);
	}
	
	
	@RequestMapping(value = "/processAddNewAgent", method = RequestMethod.POST)
	public String processAddNewAgent(@PathVariable String path, @ModelAttribute AddNewAgentDto addNewAgentDto, HttpServletRequest request) {

		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_" + path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		ResponseWrapper response = agentService.processAddAgent(loggedUserDto, subUserDto, addNewAgentDto);
		
		if (response.getRespCode() == 0) {
			
		}
		else{
			///TODO: add response code for error
		}
		
		RequestStatusDto requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
		
		request.getSession().setAttribute("requestStatusDto",requestStatusDto);
		request.getSession().setAttribute("userDto",userDtoInstance);
		request.getSession().setAttribute("addNewAgentDto",addNewAgentDto);
		
		return "redirect:/" + path + "/addAgent";
	}
	
	@RequestMapping(value="/changeAgentBalance", method=RequestMethod.POST)
	public String processAgentChangeBalance(@PathVariable String path, @ModelAttribute ChangeAgentBalanceDto changeAgentBalanceDto, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = UserUtil.getUserDtoInstance(request);
		
		RequestStatusDto requestStatusDto = null;
		
	
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		ResponseWrapper response = agentService.processAgentCreditTran(loggedUserDto, subUserDto, changeAgentBalanceDto);
		
		if (response.getRespCode() == 0){
			AgentBalanceResponseData responseData = response.getDataAsSpecifiedType(AgentBalanceResponseData.class);
			requestStatusDto = new RequestStatusDto(response.getRespCode(), "Transaction completed. Reference ID: "+ responseData.getRefId());
			
		}else{
			requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
			
		}
		
		
		request.getSession().setAttribute("userDto", userDtoInstance);
		request.getSession().setAttribute("requestStatusDto", requestStatusDto);
		request.getSession().setAttribute("changeAgentBalanceDto", changeAgentBalanceDto);
		
		return "redirect:/" +path+ "/changeBalance";
	}
	
	@RequestMapping(value="/agentStatus", method=RequestMethod.GET)
	public ModelAndView getAgentStatus(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		
		////TODO: temporary. Check where to get targer and manager id
		String targetUserId = request.getParameter("targetUserId");
		////////////////////////
		
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		RequestStatusDto requestStatusDto = null;
		ResponseWrapper response = agentService.processAgentStatus(loggedUserDto, subUserDto, targetUserId);
			
		if (response.getRespCode() == 0){
			AgentStatusResponseData responseData = response.getDataAsSpecifiedType(AgentStatusResponseData.class);
		}else{
			requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
			
		}
		
		///remove session vars
		request.getSession().removeAttribute("userDto");
		
		//model put
		model.put("userDto", userDtoInstance);
		model.put("requestStatusDto", requestStatusDto);
		
		return new ModelAndView(Constants.View.STATUS, model);
	}
	
	@RequestMapping(value="/changeAgentStatus", method=RequestMethod.GET)
	public ModelAndView viewChangeAgentStatus(@PathVariable String path, HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();
		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
		 
		RequestStatusDto requestStatusDto = (RequestStatusDto) request.getSession().getAttribute("requestStatusDto") ;
		if (requestStatusDto != null){
			model.put("requestStatusDto", requestStatusDto);
			
			request.getSession().removeAttribute("requestStatusDto");
		}
		
		ChangeAgentStatusDto changeAgentStatusDto = (ChangeAgentStatusDto) request.getSession().getAttribute("ChangeAgentStatusDto");
		if (changeAgentStatusDto != null){
			request.getSession().removeAttribute("changeAgentStatusDto");
		}else{
			changeAgentStatusDto = new ChangeAgentStatusDto();
			changeAgentStatusDto.setTargetUserID(request.getParameter("targetUserID"));
		}
		
		
		///remove session vars
		request.getSession().removeAttribute("userDto");
		
		//model put
		model.put("userDto", userDtoInstance);
		model.put("changeAgentStatusDto", changeAgentStatusDto);
		return new ModelAndView(Constants.View.STATUS, model);
	}
	
	@RequestMapping(value="/processChangeAgentStatus", method=RequestMethod.POST)
	public String processChangeAgentStatus(@PathVariable String path, @ModelAttribute ChangeAgentStatusDto changeAgentStatusDto,  HttpServletRequest request){
		Map<String, Object> model = new HashMap<>();

		
		UserDto userDtoInstance = (UserDto) request.getSession().getAttribute("userDto_"+path);
		UserDto loggedUserDto = UserUtil.getLoggedUserDto(request);
				
		UserDto subUserDto = UserUtil.getSubUserDto(loggedUserDto, userDtoInstance);
		
		RequestStatusDto requestStatusDto = null;
		ResponseWrapper response = agentService.processChangeAgentStatus(loggedUserDto, subUserDto, changeAgentStatusDto);
		
		
		requestStatusDto = new RequestStatusDto(response.getRespCode(), response.getMessage());
		
		
		request.getSession().setAttribute("userDto", userDtoInstance);
		request.getSession().setAttribute("changeAgentStatusDto", changeAgentStatusDto);
		request.getSession().setAttribute("requestStatusDto", requestStatusDto);
		
		return "redirect:/" + path + "/changeAgentStatus";
	}
}
