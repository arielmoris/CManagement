package com.cms.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.cms.bean.ResponseWrapper;
import com.cms.service.ManagerService;
import com.cms.util.Configurator;
import com.cms.util.HttpUtil;

@Service("managerService")
public class ManagerServiceImpl implements ManagerService{
	
	
	private static final Logger logger = LoggerFactory.getLogger(ManagerServiceImpl.class);
	
	/**
	 * Add New Manager
	 * @param agentId
	 * @param userId
	 * @param sessionId
	 * @param firstName -> mandatory
	 * @param lastName	-> mandatory
	 * @param email
	 * @param mobileNo
	 * @param password
	 * @return
	 */
	@Override
	public ResponseWrapper processAddManager(String agentId, String userId, String sessionId, String firstName, String lastName, String email, String mobileNo, String password){
		logger.debug("Inside processAddManager");

		ResponseWrapper result = null;
		List<NameValuePair> params = new ArrayList<NameValuePair>();

		params.add(new BasicNameValuePair("requestType", "AddManager"));
		params.add(new BasicNameValuePair("agentId", agentId));
		params.add(new BasicNameValuePair("userId", userId));
		params.add(new BasicNameValuePair("sessionId", sessionId));
		params.add(new BasicNameValuePair("firstName", firstName));
		params.add(new BasicNameValuePair("lastName", lastName));
		params.add(new BasicNameValuePair("email",email));
		params.add(new BasicNameValuePair("mobileNo",mobileNo));
		params.add(new BasicNameValuePair("password",password));

		final String url = Configurator.getConfig("webportal.url");

		result = HttpUtil.sendPost(url, params);

		logger.debug("Exiting processAddManager(result=)");
		return result;
	}
	
	/**
	 * View Manager Info
	 * @param agentId
	 * @param userId
	 * @param sessionId
	 * @param managerId
	 * @param viewType -> [S, F]; S - simple view, F - full details
	 * @return
	 */
	@Override
	public ResponseWrapper processManagerInfo(String agentId, String userId, String sessionId, String managerId, String viewType){
		logger.debug("Inside processManagerInfo");

		ResponseWrapper result = null;
		List<NameValuePair> params = new ArrayList<NameValuePair>();

		params.add(new BasicNameValuePair("requestType", "ManagerInfo"));
		params.add(new BasicNameValuePair("agentId", agentId));
		params.add(new BasicNameValuePair("userId", userId));
		params.add(new BasicNameValuePair("sessionId", sessionId));
		params.add(new BasicNameValuePair("managerId", managerId));
		params.add(new BasicNameValuePair("viewType", viewType));

		final String url = Configurator.getConfig("webportal.url");

		result = HttpUtil.sendPost(url, params);

		logger.debug("Exiting processManagerInfo(result=)");
		return result;
	}
	/**
	 * Update Manager Info
	 * @param agentId
	 * @param userId
	 * @param sessionId
	 * @param mgrUname
	 * @param firstName
	 * @param lastName
	 * @param mobileNo
	 * @param emailAdd
	 * @return
	 */
	@Override
	public ResponseWrapper processUpdateManager(String agentId, String userId, String sessionId, String mgrUname, String firstName, String lastName, String mobileNo, String emailAdd){
		logger.debug("Inside processUpdateManager");

		ResponseWrapper result = null;
		List<NameValuePair> params = new ArrayList<NameValuePair>();

		params.add(new BasicNameValuePair("requestType", "UpdateManager"));
		params.add(new BasicNameValuePair("agentId", agentId));
		params.add(new BasicNameValuePair("userId", userId));
		params.add(new BasicNameValuePair("sessionId", sessionId));
		params.add(new BasicNameValuePair("mgrUname", mgrUname));
		params.add(new BasicNameValuePair("firstName", firstName));
		params.add(new BasicNameValuePair("lastName", lastName));
		params.add(new BasicNameValuePair("mobileNo", mobileNo));
		params.add(new BasicNameValuePair("emailAdd", emailAdd));

		final String url = Configurator.getConfig("webportal.url");

		result = HttpUtil.sendPost(url, params);

		logger.debug("Exiting processManagerInfo(result=)");
		return result;
	}
}
